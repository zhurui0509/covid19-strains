


const factory = require('@graphy/core.data.factory');
const Scribable = require('@graphy/core.class.scribable');

const R_DIRECTIVE_CONTENTS = /^`\[[^\]]+\](.*)$/;

const HM_COERCIONS_DEFAULT = new Map([
	[Date, dt => factory.dateTime(dt)],
	[Number, x => factory.number(x)],
]);

class Writable extends Scribable {
	constructor(gc_writable={}) {
		super(gc_writable);

		let {
			lists: gc_lists=null,
		} = gc_writable;

		// start with default coercions map
		let hm_coercions = HM_COERCIONS_DEFAULT;

		// user is overriding coercions
		if(gc_writable.coercions) {
			// copy default map
			hm_coercions = new Map(hm_coercions);

			// add each entry from user-defined map
			for(let [dc_type, f_transform] of gc_writable.coercions) {
				hm_coercions.set(dc_type, f_transform);
			}
		}

		// lists
		let g_lists = {
			first: '>http://www.w3.org/1999/02/22-rdf-syntax-ns#first',
			rest: '>http://www.w3.org/1999/02/22-rdf-syntax-ns#rest',
			nil: '>http://www.w3.org/1999/02/22-rdf-syntax-ns#nil',
		};

		// custom transcoder
		if(gc_lists) {
			let {
				first: sc1_first=null,
				rest: sc1_rest=null,
				nil: sc1_nil=null,
			} = gc_lists;

			if(sc1_first) g_lists.first = sc1_first;
			if(sc1_rest) g_lists.rest = sc1_rest;
			if(sc1_nil) g_lists.nil = sc1_nil;
		}

		Object.assign(this, {
			_xc_state: 0,
			_hm_coercions: hm_coercions,
			_g_lists: g_lists,
		});
	}

	// serialize comment
	_serialize_comment(s_comment, g_directive) {
		let s_write = '';

		// non-data state
		if(2 !== this._xc_state) {
			// break line
			s_write += '\n';

			// update state
			this._xc_state = 2;
		}

		// comment width
		if(g_directive && g_directive.width) {
			let n_width = g_directive.width;

			let a_lines = [];

			while(s_comment.length > n_width) {
				let s_line = s_comment.slice(0, n_width+1);

				let m_line = /^(.*[^\s])\s+/.exec(s_line);

				if(m_line) {
					let s_push = m_line[1];
					a_lines.push(s_push);
					s_comment = s_comment.slice(s_push.length).replace(/^\s+/, '');
				}
				else {
					a_lines.push(s_comment.slice(0, n_width));
					s_comment = s_comment.slice(n_width);
				}
			}

			s_comment = a_lines.join('\n');
		}

		return s_write+(super._serialize_comment(s_comment) || '');
	}


	// transcode list into concise-pairs hash
	_transcode_list(a_list, g_lists=this._g_lists) {
		// empty list
		if(!a_list.length) {
			return g_lists.nil;
		}
		// non-empty list
		else {
			let z_item = a_list[0];
			let w_first = z_item;

			// item is nested list; transcode
			if(Array.isArray(z_item)) {
				w_first = this._transcode_list(z_item, g_lists);  // eslint-disable-line no-invalid-this
			}

			return {
				// first item
				[g_lists.first]: w_first,

				// rest of items
				[g_lists.rest]: 1 === a_list.length
					? g_lists.nil
					: this._transcode_list(a_list.slice(1), g_lists),  // eslint-disable-line no-invalid-this
			};
		}
	}

	// serialize a writable data event directive
	_apply_directive(sc1_directive, w_value) {
		// directive contents
		let m_directive = R_DIRECTIVE_CONTENTS.exec(sc1_directive);
		if(!m_directive) {
			throw new Error(`Invalid writable data event directive string: "${sc1_directive}"`);
		}

		// parse as JSON
		let g_directive;
		try {
			g_directive = JSON.parse(m_directive[1]);
		}
		catch(e_parse) {
			throw new Error(`Unable to parse JSON in writable data event directive: "${m_directive[1]}"`);
		}

		// directive type
		let s_type = g_directive.type;

		// deduce directive type
		switch(s_type) {
			// comment
			case 'comment': {
				// serializer supports commenting; serialize comment
				if(this._serialize_comment) {
					return {
						write: this._serialize_comment(w_value+'', g_directive),
					};
				}
				break;
			}

			// newlines
			case 'newlines': {
				// serializer supports newlines; serialize newlines
				if(this._serialize_newlines) {
					return {
						write: this._serialize_newlines(w_value),
					};
				}
				break;
			}

			// config
			case 'config': {
				switch(g_directive.value) {
					// list config
					case 'lists': {
						// ref stack of list serializers
						let a_list_serializers = this._a_list_serializers;

						// push current method to stack
						a_list_serializers.push(this._serialize_list_object);

						// inherit unspecified keys from parent
						let g_list_default = this._g_lists;

						// build list config
						let g_lists = {
							first: w_value.first || g_list_default.first,
							rest: w_value.rest || g_list_default.rest,
							nil: w_value.nil || g_list_default.nil,
						};

						// redefine list object serialization
						this._serialize_list_object = function(a_list, n_nest_level) {
							// transcode list object
							let hc2_transcoded = this._transcode_list(a_list, g_lists);

							// serialize object
							return this._encode_objects(hc2_transcoded, n_nest_level);
						};

						// return local directive instructions
						return {
							exit: () => {
								this._serialize_list_object = a_list_serializers.pop();
							},
						};
					}

					// no such key
					default: {
						throw new Error(`No such config key '${g_directive.value}'`);
					}
				}
			}

			// other
			default: {
				throw new Error(`Invalid writable data event directive type: '${s_type}'`);
			}
		}

		// nothing
		return {};
	}

	// if not overriden by subclass, serialize quads in default graph
	_serialize_c4(hc4_quads) {
		let h_prefixes = this._h_prefixes;
		let a_unions = [];
		let s_write = '';

		// each graph in quads hash
		for(let sv1_graph in hc4_quads) {
			// non-default graph; union from dataset
			if('*' !== sv1_graph) a_unions.push(sv1_graph);

			// add all quads from graph
			s_write += this._serialize_c3(hc4_quads[sv1_graph]);
		}

		// a union was performed
		if(a_unions.length) {
			// warn about implicit union
			let s_warning = `Destination format does not support quads; an implicit union into the default graph was performed on the quads contained in graphs: ${a_unions.map(sc1 => factory.c1(sc1, h_prefixes).verbose()).join(', ')}`;

			// emit warning, wasn't listened to; force thru warn/stderr channel
			if(!this.emit('warning', s_warning)) {
				console.warn(s_warning);
			}
		}

		return s_write;
	}
}

module.exports = Writable;
