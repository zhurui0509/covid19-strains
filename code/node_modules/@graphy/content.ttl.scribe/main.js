


const factory = require('@graphy/core.data.factory');
const Scribable = require('@graphy/core.class.scribable');

const {
	terse,
	c1_to_nt,
} = factory;



function terse_s(yt_subject, h_prefixes) {
	if('NamedNode' === yt_subject.termType) {
		return terse(yt_subject.value, h_prefixes);
	}
	else {
		return '_:'+yt_subject.value;
	}
}



const terse_p = (yt_predicate, h_prefixes) => terse(yt_predicate.value, h_prefixes);

const P_IRI_XSD_STRING = 'http://www.w3.org/2001/XMLSchema#';
function terse_o(yt_object, h_prefixes) {
	switch(yt_object.termType) {
		// named node
		case 'NamedNode': return terse(yt_object.value, h_prefixes);

		// literal
		case 'Literal': {
			let s_contents = JSON.stringify(yt_object.value);

			if(yt_object.language) {
				return s_contents+'@'+yt_object.language;
			}
			else if(P_IRI_XSD_STRING === yt_object.datatype.value) {
				return s_contents;
			}
			else {
				return s_contents+'^^'+terse(yt_object.datatype.value, h_prefixes);
			}
		}

		// blank node
		default: return '_:'+yt_object.value;
	}
}



class Turtle_Scriber extends Scribable {
	constructor(gc_scriber={}) {
		super(gc_scriber);

		this._yt_subject = null;
		this._yt_predicate = null;

		// prefixes given
		if(gc_scriber.prefixes) {
			// update prefixes and push to output
			this.push(this._serialize_prefixes(gc_scriber.prefixes, true) || '');
		}
	}

	_reset() {
		// some subject is open
		if(this._yt_subject) {
			// close subject
			this._s_push += ' .\n\n';

			// reset subject
			this._yt_subject = null;
		}

		// reset predicate
		this._yt_predicate = null;
	}

	_serialize_prefixes(h_prefixes_in, b_force_serialize=false) {
		// ref current prefixes
		let h_prefixes = this._h_prefixes;

		// serialize new prefixes
		let st_prefixes = '';
		for(let si_prefix in h_prefixes_in) {
			// prefix already exists and no change; skip
			if((si_prefix in h_prefixes) && h_prefixes_in[si_prefix] === h_prefixes[si_prefix] && !b_force_serialize) {
				continue;
			}

			// serialize addition
			st_prefixes += `@prefix ${si_prefix}: ${factory.namedNode(h_prefixes_in[si_prefix]).verbose()} .\n`;
		}

		// change detected
		if(st_prefixes) {
			// (re)cache prefixes
			this._update_prefixes(h_prefixes_in, true);

			// reset all markers
			this._reset();

			// write prefixes
			return st_prefixes+'\n';
		}
	}


	_serialize_c3r(hc3r_triples) {
		// ref prefixes
		let h_prefixes = this._h_prefixes;

		// string building
		let st_quads = '';


		let b_subjects = false;

		for(let sc1_subject in hc3r_triples) {
			// quick convert subject from concise term to terse
			let st1_subject = c1_to_nt(sc1_subject, h_prefixes);

			// not a term; skip
			if(!st1_subject) continue;

			let st_triples = '';
			if(b_subjects) st_triples += ' .\n\n';

	//
			st_triples += st1_subject+' ';

			let b_predicates = false;

			// each predicate
			let hc2r_pairs = hc3r_triples[sc1_subject];
			for(let sc1_predicate in hc2r_pairs) {
				// quick convert predicate from concise term to terse
				let st1_predicate = c1_to_nt(sc1_predicate, h_prefixes);

				// not a term; skip
				if(!st1_predicate) continue;

		//
				let st_pairs = '';
				if(b_predicates) st_pairs += ' ;\n\t';

				// pairs output
				st_pairs += st1_predicate+' ';

				let b_objects = false;

				// each object
				for(let sc1_object of hc2r_pairs[sc1_predicate]) {
					// quick convert object from concise term to terse
					let st1_object = c1_to_nt(sc1_object, h_prefixes);

					// not a term; skip
					if(!st1_object) continue;

					if(b_objects) st_pairs += ', ';
					b_objects = true;

					// add object to pairs
					st_pairs += st1_object;
				}

				// objects written; add pairs to output
				if(b_objects) {
					st_triples += st_pairs;
					b_predicates = true;
				}
			}

			// predicates written; add triples to output
			if(b_predicates) {
				st_quads += st_triples;
				b_subjects = true;
			}
		}

		// subjects written; terminate
		if(b_subjects) st_quads += ' .\n\n';

		// reset all markers
		this._reset();

		return st_quads;
	}


	_serialize_quad(g_quad) {
		let h_prefixes = this._h_prefixes;

		let {
			subject: yt_subject,
			predicate: yt_predicate,
			object: yt_object,
		} = g_quad;


		// same subject
		if(yt_subject.equals(this._yt_subject)) {
			// same prediate
			if(yt_predicate.equals(this._yt_predicate)) {
				// write object
				this._s_push += ', '+terse_o(yt_object, h_prefixes);
			}
			// different predicate
			else {
				// write pair
				this._s_push += ' ;\n\t'+terse_p(yt_predicate, h_prefixes)+' '+terse_o(yt_object, h_prefixes);

				// update prediate
				this._yt_predicate = yt_predicate;
			}
		}
		// subject not identical to previous
		else {
			let st_line = terse_s(yt_subject, h_prefixes)+' '+terse_p(yt_predicate, h_prefixes)+' '+terse_o(yt_object, h_prefixes);

			// different subject
			if(this._yt_subject) {
				// write triple
				this._s_push += ' .\n\n'+st_line;
			}
			// first subject
			else {
				this._s_push += st_line;
			}

			// save subject and predicate
			this._yt_subject = yt_subject;
			this._yt_predicate = yt_predicate;
		}
	}

	_flush() {
		// flush buffer
		Turtle_Scriber._flush_buffer(this);

		// triple needs closing
		if(this._yt_subject) {
			this.push(' .\n');
		}

		// eof
		this.push(null);
	}
}

Object.assign(Turtle_Scriber, {
	_serialize_comment: Scribable.prototype._serialize_hash_comment,
});

module.exports = function(g_config) {
	return new Turtle_Scriber(g_config);
};
