

/* eslint-disable global-require */

const factory = require('@graphy/core.data.factory');

const memoize = (s_package) => {
	delete graphy[s_package];
	return graphy[s_package] = require('@graphy/'+s_package);
};



// ttl package
const ttl = {
	// read ttl
	get read() {
		// memoize
		delete graphy.content.ttl.read;
		return (graphy.content.ttl.read = require('@graphy/content.ttl.read'));
	},

	// write ttl
	get write() {
		// memoize
		delete graphy.content.ttl.write;
		return (graphy.content.ttl.write = require('@graphy/content.ttl.write'));
	},
	// scribe ttl
	get scribe() {
		// memoize
		delete graphy.content.ttl.scribe;
		return (graphy.content.ttl.scribe = require('@graphy/content.ttl.scribe'));
	},
};
// trig package
const trig = {
	// read trig
	get read() {
		// memoize
		delete graphy.content.trig.read;
		return (graphy.content.trig.read = require('@graphy/content.trig.read'));
	},

	// write trig
	get write() {
		// memoize
		delete graphy.content.trig.write;
		return (graphy.content.trig.write = require('@graphy/content.trig.write'));
	},
	// scribe trig
	get scribe() {
		// memoize
		delete graphy.content.trig.scribe;
		return (graphy.content.trig.scribe = require('@graphy/content.trig.scribe'));
	},
};
// nt package
const nt = {
	// read nt
	get read() {
		// memoize
		delete graphy.content.nt.read;
		return (graphy.content.nt.read = require('@graphy/content.nt.read'));
	},

	// write nt
	get write() {
		// memoize
		delete graphy.content.nt.write;
		return (graphy.content.nt.write = require('@graphy/content.nt.write'));
	},
	// scribe nt
	get scribe() {
		// memoize
		delete graphy.content.nt.scribe;
		return (graphy.content.nt.scribe = require('@graphy/content.nt.scribe'));
	},
};
// nq package
const nq = {
	// read nq
	get read() {
		// memoize
		delete graphy.content.nq.read;
		return (graphy.content.nq.read = require('@graphy/content.nq.read'));
	},

	// write nq
	get write() {
		// memoize
		delete graphy.content.nq.write;
		return (graphy.content.nq.write = require('@graphy/content.nq.write'));
	},
	// scribe nq
	get scribe() {
		// memoize
		delete graphy.content.nq.scribe;
		return (graphy.content.nq.scribe = require('@graphy/content.nq.scribe'));
	},
};

const xml = {
	get scribe() {
		// memoize
		delete graphy.content.xml.scribe;
		return (graphy.content.xml.scribe = require('@graphy/content.xml.scribe'));
	},
};


// // SPARQL Results package
// const sparql_results = {
// 	// deserialize sparql_results input
// 	get deserializer() {
// 		// memoize
// 		delete sparql_results.deserializer;
// 		return (sparql_results.deserializer = require('../sparql-results/deserializer.js'));
// 	},
// };


const H_CONTENT_MIMES = {
	'text/turtle': ttl,
	'application/trig': trig,
	'application/n-triples': nt,
	'application/n-quads': nq,
	'application/rdf+xml': xml,
// 'application/sparql-results+json': sparql_results,
};

const H_CONTENT_TAGS = {
	nt,
	ntriples: nt,
	'n-triples': nt,
	nq,
	nquads: nq,
	'n-quads': nq,
	ttl,
	turtle: ttl,
	trig,
	xml,
	'rdf/xml': xml,
// 'application/sparql-results+json': sparql_results,
};



const R_CONTENT_TYPE = /^((?:application|text)\/[^\0-\x20()<>@,;:\\"\/[\]?.=]+)(;.+)*$/i;

const graphy = module.exports = Object.assign({

	VERSION: '4.1.0',

	content: Object.assign((s_query_in) => {
		let s_query = s_query_in.toLowerCase();

		if(s_query in H_CONTENT_TAGS) {
			return H_CONTENT_TAGS[s_query];
		}

		let m_content_type = R_CONTENT_TYPE.exec(s_query);
		if(!m_content_type) throw new Error(`invalid content-type string: "${s_query}"`);
		let [, s_content_type, s_parameters] = m_content_type;
		let s_content_type_normal = s_content_type.toLowerCase();

		if(s_content_type_normal in H_CONTENT_MIMES) {
			return H_CONTENT_MIMES[s_content_type_normal];
		}
		else {
			throw new Error(`no content handlers matched query for "${s_content_type_normal}"`);
		}
	}, {
		ttl,
		trig,
		nt,
		nq,


		xml,
	}),

	core: {
		data: {
			get factory() {
				// memoize
				delete graphy.core.data.factory;
				return (graphy.core.data.factory = require('@graphy/core.data.factory'));
			},
		},
		iso: {
			get stream() {
				// memoize
				delete graphy.core.iso.stream;
				return (graphy.core.iso.stream = require('@graphy/core.iso.stream'));
			},
		},
	},

	get 'core.data.factory'() {
		return memoize('core.data.factory');
	},

	get 'core.iso.stream'() {
		return memoize('core.iso.stream');
	},

	util: {
		dataset: {
			get tree() {
				// memoize
				delete graphy.util.dataset.tree;
				return (graphy.util.dataset.tree = require('@graphy/util.dataset.tree'));
			},
		},
	},

	get 'util.dataset.tree'() {
		return memoize('util.dataset.tree');
	},

	memory: {
		dataset: {
			get fast() {
				// memoize
				delete graphy.memory.dataset.fast;
				return (graphy.memory.dataset.fast = require('@graphy/memory.dataset.fast'));
			},
		},
	},

	get 'memory.dataset.fast'() {
		return memoize('memory.dataset.fast');
	},



	get 'content.ttl.read'() {
		return memoize('content.ttl.read');
	},

	get 'content.ttl.write'() {
		return memoize('content.ttl.write');
	},

	get 'content.ttl.scribe'() {
		return memoize('content.ttl.scribe');
	},

	get 'content.trig.read'() {
		return memoize('content.trig.read');
	},

	get 'content.trig.write'() {
		return memoize('content.trig.write');
	},

	get 'content.trig.scribe'() {
		return memoize('content.trig.scribe');
	},

	get 'content.nt.read'() {
		return memoize('content.nt.read');
	},

	get 'content.nt.write'() {
		return memoize('content.nt.write');
	},

	get 'content.nt.scribe'() {
		return memoize('content.nt.scribe');
	},

	get 'content.nq.read'() {
		return memoize('content.nq.read');
	},

	get 'content.nq.write'() {
		return memoize('content.nq.write');
	},

	get 'content.nq.scribe'() {
		return memoize('content.nq.scribe');
	},


	get 'content.xml.scribe'() {
		return memoize('content.xml.scribe');
	},



}, factory);


// export graphy to window object if in main thread of browser
if('undefined' !== typeof window) window.graphy = graphy;
